//Merge Sorted Array
/*You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, 
and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, 
but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
*/
//c++ solution 1
//two pointers
# include<iostream>
# include<vector>
void merge(vector<int>&nums1, int m, vector<int>&nums2, int n){
	int nums[m+n];  //temp array
	int p=0,q=0;  //two pointers
	int cur;  //a temp variable
	while(p<m||q<n){
		if(p>=m){    //nums1 finished
			cur = nums2[q++];
		}
		else if(q>=n){   //nums2 finished
			cur = nums1[p++];
		}
		else if(nums1[p]<nums2[q]){  //nums1 smaller than nums2
			cur = nums1[p++];
		}
		else{
			cur = nums2[q++];
		}
		nums[p+q-1]=cur;  //idx begin from 0
	}
	for(int i=0;i<m+n;i++){   //nums1 as the final array
		nums1[i]=nums[i];
	}
}
T(n)=O(m+n)
//solution 2
//add nums2 to the rear of nums1,then sort it
void merge(vector<int>&  nums1, int m, vector<int>& nums2,int n){
	for(int i=m+1,j=0;j<n;j++){
		nums1[i]=nums2[j];
	}
	sort(nums1.begin(),nums1.end());
}
